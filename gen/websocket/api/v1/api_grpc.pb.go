// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: protos/websocket/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebsocketService_Subscribe_FullMethodName             = "/websocket.v1.WebsocketService/Subscribe"
	WebsocketService_Unsubscribe_FullMethodName           = "/websocket.v1.WebsocketService/Unsubscribe"
	WebsocketService_GetSubscriptionStatus_FullMethodName = "/websocket.v1.WebsocketService/GetSubscriptionStatus"
	WebsocketService_GetConnectionStatus_FullMethodName   = "/websocket.v1.WebsocketService/GetConnectionStatus"
	WebsocketService_Broadcast_FullMethodName             = "/websocket.v1.WebsocketService/Broadcast"
	WebsocketService_GetStatistics_FullMethodName         = "/websocket.v1.WebsocketService/GetStatistics"
)

// WebsocketServiceClient is the client API for WebsocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketServiceClient interface {
	// Subscribe subscribes to a channel
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// Unsubscribe unsubscribes from a channel
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetSubscriptionStatus gets the status of subscriptions
	GetSubscriptionStatus(ctx context.Context, in *GetSubscriptionStatusRequest, opts ...grpc.CallOption) (*GetSubscriptionStatusResponse, error)
	// GetConnectionStatus gets the status of connections to external sources
	GetConnectionStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConnectionStatusResponse, error)
	// Broadcast broadcasts a message to all clients subscribed to a channel
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetStatistics gets statistics about the websocket service
	GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatisticsResponse, error)
}

type websocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketServiceClient(cc grpc.ClientConnInterface) WebsocketServiceClient {
	return &websocketServiceClient{cc}
}

func (c *websocketServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, WebsocketService_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WebsocketService_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) GetSubscriptionStatus(ctx context.Context, in *GetSubscriptionStatusRequest, opts ...grpc.CallOption) (*GetSubscriptionStatusResponse, error) {
	out := new(GetSubscriptionStatusResponse)
	err := c.cc.Invoke(ctx, WebsocketService_GetSubscriptionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) GetConnectionStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConnectionStatusResponse, error) {
	out := new(ConnectionStatusResponse)
	err := c.cc.Invoke(ctx, WebsocketService_GetConnectionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WebsocketService_Broadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketServiceClient) GetStatistics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, WebsocketService_GetStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketServiceServer is the server API for WebsocketService service.
// All implementations must embed UnimplementedWebsocketServiceServer
// for forward compatibility
type WebsocketServiceServer interface {
	// Subscribe subscribes to a channel
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// Unsubscribe unsubscribes from a channel
	Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error)
	// GetSubscriptionStatus gets the status of subscriptions
	GetSubscriptionStatus(context.Context, *GetSubscriptionStatusRequest) (*GetSubscriptionStatusResponse, error)
	// GetConnectionStatus gets the status of connections to external sources
	GetConnectionStatus(context.Context, *emptypb.Empty) (*ConnectionStatusResponse, error)
	// Broadcast broadcasts a message to all clients subscribed to a channel
	Broadcast(context.Context, *BroadcastRequest) (*emptypb.Empty, error)
	// GetStatistics gets statistics about the websocket service
	GetStatistics(context.Context, *emptypb.Empty) (*StatisticsResponse, error)
	mustEmbedUnimplementedWebsocketServiceServer()
}

// UnimplementedWebsocketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebsocketServiceServer struct {
}

func (UnimplementedWebsocketServiceServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedWebsocketServiceServer) Unsubscribe(context.Context, *UnsubscribeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedWebsocketServiceServer) GetSubscriptionStatus(context.Context, *GetSubscriptionStatusRequest) (*GetSubscriptionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionStatus not implemented")
}
func (UnimplementedWebsocketServiceServer) GetConnectionStatus(context.Context, *emptypb.Empty) (*ConnectionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionStatus not implemented")
}
func (UnimplementedWebsocketServiceServer) Broadcast(context.Context, *BroadcastRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedWebsocketServiceServer) GetStatistics(context.Context, *emptypb.Empty) (*StatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedWebsocketServiceServer) mustEmbedUnimplementedWebsocketServiceServer() {}

// UnsafeWebsocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketServiceServer will
// result in compilation errors.
type UnsafeWebsocketServiceServer interface {
	mustEmbedUnimplementedWebsocketServiceServer()
}

func RegisterWebsocketServiceServer(s grpc.ServiceRegistrar, srv WebsocketServiceServer) {
	s.RegisterService(&WebsocketService_ServiceDesc, srv)
}

func _WebsocketService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).Unsubscribe(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_GetSubscriptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).GetSubscriptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketService_GetSubscriptionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).GetSubscriptionStatus(ctx, req.(*GetSubscriptionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_GetConnectionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).GetConnectionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketService_GetConnectionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).GetConnectionStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketService_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebsocketService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServiceServer).GetStatistics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsocketService_ServiceDesc is the grpc.ServiceDesc for WebsocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websocket.v1.WebsocketService",
	HandlerType: (*WebsocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _WebsocketService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _WebsocketService_Unsubscribe_Handler,
		},
		{
			MethodName: "GetSubscriptionStatus",
			Handler:    _WebsocketService_GetSubscriptionStatus_Handler,
		},
		{
			MethodName: "GetConnectionStatus",
			Handler:    _WebsocketService_GetConnectionStatus_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _WebsocketService_Broadcast_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _WebsocketService_GetStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/websocket/v1/api.proto",
}
